postlicyd.conf-srs(5)
=====================
:doctype: manpage
include:../mk/asciidoc.conf[]

NAME
----
postlicyd.conf-srs - configuration of the SRS filter of postlicyd

SYNOPSIS
--------
This +srs+ allow early elimination of invalid +SRS+ emails.

This filter type has been introduced in +postlicyd+ 0.9.

PARAMETERS
----------
Its parameters are:

+bounce_domain = string ;+::
    Domain of the bounces.

+secret_file = path ;+::
    File with the SRS secret. This file can the same as the one used by
linkgit:pfix-srsd[8,../pfix-srsd/pfix-srsd.html].

RESULTS
-------
Possible results are:

* +none+: The recipient is not in the bounce domain and the SRS filter cannot be applied to it.
* +match+: The recipient is in the bounce domain and it's a valid SRS-encoded address.
* +fail+: The recipient is in the bounce domain but it's not a valid SRS-encoded address.

EXAMPLE
-------
The following example filter setup checks for bounces and validates the bounce domain and SRS address.

----
# First we check the sender is empty, meaning it's a bounce: MAIL FROM: <>
check_srs_bounce {
    type = match;
    condition = sender #=;
    on_match = check_srs_hash;
    on_fail = postfix:DUNNO;
}

# Now we check the bounce domain matches, and the hash is valid, with the SRS filter
check_srs_hash {
    type = srs;
    bounce_domain = bounces.example.com;
    secret_file = /etc/pfixtools/pfix-srsd-secrets;
    on_match = postfix:DUNNO;
    on_none = postfix:REJECT Invalid bounce domain;
    on_fail = postfix:REJECT Invalid sender for SRS bounces;
}

# SRS is checked at smtpd_recipient_restrictions
recipient_filter = check_srs_bounce;
----

To activate this you may have something such as the following in postfix's main.cf:

----
smtpd_recipient_restrictions =
    permit_mynetworks,
    permit_sasl_authenticated,
    check_policy_service unix:/var/run/postlicyd/postlicyd.sock,
    reject_unauth_destination
----

COPYRIGHT
---------
Copyright 2009-2012 the Postfix Tools Suite Authors. License BSD.

// vim:filetype=asciidoc:tw=78
