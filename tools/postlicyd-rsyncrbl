#!/bin/bash

# Setup and Create temporary path
init() {
    export LC_ALL=C
    export LANC=C
    export LANGUAGE=C

    tmp=$(mktemp -td postlicyd-rsyncrbl.XXXXXX) || exit 1
    successfile="$tmp/.success"
}

# Cleanup and force reload of the postlicyd daemon
fini() {
    if [ -f "$successfile" ] && [ -f "$pidfile" ] ; then
        pid=$(cat "$pidfile")
        [ -z "$pid" ] || kill -HUP $(cat "$pidfile")
    fi
    rm -rf $tmp
}

# Bye bye beautifyl
die() {
    echo "$1"
    fini
    exit 1
}

# Usage
usage() {
    echo "usage: $(basename "$0") confile spoolroot pidfile"
    [ -z "$1" ] || echo "$1"
    exit 1
}

file_stats() {
  if [ -f "$1" ] ; then
      stat -c="%s-%Y" "$1"
  else
      echo "0-0"
  fi
}

# Rsync a rbl file
getfile() {
    out="$1"
    url="$2"
    proxy="$3"

    mtime_before=$(file_stats "$out")
    if [ -z "$proxy" ]; then
        rsync --no-motd -q -t -T "$tmp" "$url" "$out" || return 1
    else
        RSYNC_CONNECT_PROG="$proxy" rsync --no-motd -q -t -T "$tmp" "$url" "$out" || return 1
    fi
    mtime_after=$(file_stats "$out")

    # The file has changed
    if [ "$mtime_after" != "$mtime_before" ] ; then
        # Update ownership and permissions
        chown nobody:nogroup "$out"
        chmod 600 "$out"

        # Touch the successful file that is used to check if a reload
        # is needed
        touch "$successfile"
    fi
    return 0
}

# Check command line arguments
conf="$1"
spool="$2"
pidfile="$3"

[ -z "$pidfile" ] && usage
[ -f "$conf" ] || usage "configuration file ($conf) does not exists"
[ -d "$spool" ] || usage "spool directory ($spool) does not exists"

init

cd "$spool" || die "Can't cd to $spool"

while read line ; do
    # Strip comment from lines
    line=${line%%\#*}
    if [ -z "$line" ]; then
        continue ;
    fi
    # Sample line:
    # cbl.abuseat.org=rsync://rsync.cbl.abuseat.org/cbl/list.txt[ssh -l sync -i /home/sync/.ssh/id_cbl_rsync host nc %H 873]
    # Split line before and after first = sign
    out=${line%%=*}
    rest=${line#*=}
    # Url is the second field
    url=${rest%%[*}
    # Then look for proxy in the third field
    if [ -n "${rest/$url/}" ]; then
        proxy=${rest#*\[}
        proxy=${proxy%%\]*} # Take what's inside [] and kill the rest
    else
        proxy=""
    fi
    getfile "$out" "$url" "$proxy" || echo "error downloading file $out from $url"
done < "$conf"

fini
exit 0
